<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Test descrption
/*
 * This test ensures that gdash is working properly
 */

test_init("gdash");
test_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="24">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _cloneArray
describe("_cloneArray", "Returns a clone of the given array");

var arr = _arrayOf(2, 1, 5, 4, 6);
var cloned = _cloneArray(arr);

for (var i = 0; i &lt; array_length_1d(arr); i++) {
    assert(cloned[i], arr[i]);
}

test_end();
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="23">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _get
describe("_get", "Retrieves a deeply nested map value");

var map = ds_map_create();
map[? "hello"] = ds_map_create();
var hello = map[? "hello"];
hello[? "world"] = 2;

assert(_get(map, "hello.world"), 2);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="22">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _set
describe("_set", "Sets a value safely in a deeply nested map");

var map = ds_map_create();
_set(map, "hello.world", 2);

var hello = map[? "hello"];
assert(hello[? "world"], 2);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="21">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _indexOf
describe('_indexOf', 'Returns the index of a value in a collection');

var arr = _arrayOf(1, 2, 3, 4);
var list = ds_list_create();
list[| 0] = 1;
list[| 1] = 2;
list[| 2] = 3;
list[| 3] = 4;

assert(_indexOf(arr, 2), 1);
assert(_indexOf(arr, 3), 2);
assert(_indexOf(arr, 6), -1);
assert(_indexOf(list, 2), 1);
assert(_indexOf(list, 100), -1);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="20">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _concat
describe('_concat', 'Appends one array to another');

var arr1 = _arrayOf(0, 1, 2);
var arr2 = _arrayOf(30, 40, 50);

var res = _concat(arr1, arr2);

assert(_length(res), 6);

assert(res[0], 0);
assert(res[1], 1);
assert(res[2], 2);
assert(res[3], 30);
assert(res[4], 40);
assert(res[5], 50);
test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="19">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _filter
describe('_filter', 'returns an array with elements removed when they are falsey in the function');

var arr = _arrayOf(0, 1, 2, 3, 4, 5, 6);

var res = _filter(arr, __isEven);

assert(_contains(res, 0));
assert(_contains(res, 2));
assert(_contains(res, 4));
assert(_contains(res, 6));

assert_not(_contains(res, 1));
assert_not(_contains(res, 3));
assert_not(_contains(res, 5));

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _find
describe('_find', 'returns the first element in an array that is truthy in the function');

var arr = _arrayOf(0, 1, 2, 3, 40, 5);
var res = _find(arr, __greaterThanThree);

assert(res, 40);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _push
describe("_push", "Adds an element to an array");

var arr = _arrayOf(0, 1, 2);
assert(_length(arr), 3);

arr = _push(arr, 3);
assert(_length(arr), 4);
assert(arr[3], 3);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _uniq
describe("_uniq", "Removes duplicate values from an array");

var duped = _arrayOf(1, 1, 2, 2, "hello", "hello", 3);
var unique = _arrayOf(1, 2, "hello", 3);

assert(_isEqual(_uniq(duped), unique));

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _isEqual
describe("_isEqual", "Determines if two values are equal");

assert(_isEqual(1, 1));
assert(_isEqual("hello", "hello"));
assert_not(_isEqual(1, 2));
assert_not(_isEqual("hello", "world"));

var map = ds_map_create();
ds_map_add(map, "test", 1);
ds_map_add(map, "test2", "hello");

var map2 = ds_map_create();
ds_map_add(map2, "test", 1);
ds_map_add(map2, "test2", "hello");

var map3 = ds_map_create();
ds_map_add(map3, "test", 2);
ds_map_add(map3, "test2", "hello");

var map4 = ds_map_create();
ds_map_add(map4, "test", 2);

assert(_isEqual(map, map2, ds_type_map));
assert_not(_isEqual(map, map3, ds_type_map));
assert_not(_isEqual(map, map4, ds_type_map));

var arr1 = _arrayOf(0, 1, 2, 3, 4);
var arr2 = _arrayOf(0, 1, 2, 3, 4);
var arr3 = _arrayOf(0, 1, 2, 3, 5);
var arr4 = _arrayOf(0, 1, 2, 3);

assert(_isEqual(arr1, arr2));
assert_not(_isEqual(arr1, arr3));
assert_not(_isEqual(arr1, arr4));

var list1 = ds_list_create();
ds_list_add(list1, 1, 2, 3, "hello");

var list2 = ds_list_create();
ds_list_add(list2, 1, 2, 3, "hello");

var list3 = ds_list_create();
ds_list_add(list3, 1, 2, 3, "goodbye");

var list4 = ds_list_create();
ds_list_add(list4, 2, 3, "hello");

assert(_isEqual(list1, list2, ds_type_list));
assert_not(_isEqual(list1, list3, ds_type_list));
assert_not(_isEqual(list1, list4, ds_type_list));

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _reduce
describe("_reduce", "Iterates over an array, calling a function, returning the overall result");

var arr;
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
arr[3] = 4;
arr[4] = 5;

assert(_reduce(arr, __sum), 15);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _map
describe("_map", "Iterates over a collection, calling a function");

var map = ds_map_create();
ds_map_add(map, '1', 1);
ds_map_add(map, '2', 2);
ds_map_add(map, '3', 3);
ds_map_add(map, '4', 4);
ds_map_add(map, '5', 5);

var list = ds_list_create();
ds_list_add(list, 1, 2, 3, 4, 5);
ds_list_sort(list, true);

var arr;
arr[0] = 1;
arr[1] = 2;
arr[2] = 3;
arr[3] = 4;
arr[4] = 5;

var mapRes = _map(map, __double, ds_type_map);
var listRes = _map(list, __double, ds_type_list);
var arrRes = _map(arr, __double);

var addTwo = _partial(__add, 2);
var arrRes2 = _map(arr, addTwo);

assert(arrRes2[0], 3);

assert(_length(mapRes), 5);
assert(_contains(mapRes, 2));
assert(_contains(mapRes, 4));
assert(_contains(mapRes, 6));
assert(_contains(mapRes, 8));
assert(_contains(mapRes, 10));

assert(_length(listRes), 5);
assert(listRes[0], 2);
assert(listRes[1], 4);
assert(listRes[2], 6);
assert(listRes[3], 8);
assert(listRes[4], 10);

assert(_length(arrRes), 5);
assert(arrRes[0], 2);
assert(arrRes[1], 4);
assert(arrRes[2], 6);
assert(arrRes[3], 8);
assert(arrRes[4], 10);

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _keys
describe("_keys", "Returns an array of all keys in a map");

var map = ds_map_create();
ds_map_add(map, 'one', 'hello');
ds_map_add(map, 'two', 'hello');
ds_map_add(map, 'three', 'hello');
ds_map_add(map, 'four', 'hello');
ds_map_add(map, 'five', 'hello');

var keys = _keys(map);

assert(_length(keys), 5);
assert(_contains(keys, 'one'));
assert(_contains(keys, 'two'));
assert(_contains(keys, 'three'));
assert(_contains(keys, 'four'));
assert(_contains(keys, 'five'));

ds_map_destroy(map);
test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _contains
describe("_contains", "Should determine if arbitrary things contain targets");

// String contains string
assert(_contains('hello', 'ello'), true);
assert_not(_contains('hello', 'goodbye'), true);

// Array contains
var arr;
arr[0] = 1;
arr[1] = 'hello';
arr[2] = 'goodbye';

assert(_contains(arr, 1), true);
assert(_contains(arr, 'hello'), true);
assert(_contains(arr, 'goodbye'), true);
assert_not(_contains(arr, 'world'), true);
assert_not(_contains(arr, 2), true);

// ds_map contains
var map = ds_map_create();
ds_map_add(map, 'hello', 'world');
ds_map_add(map, 'number', 2);

assert(_contains(map, 'world'), true);
assert(_contains(map, 2), true);
ds_map_destroy(map);
test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// _typeOf
describe("_typeOf", "Should return the type of any known data type");

assert(_typeOf(100), "real");
assert(_typeOf("hello"), "string");
assert(_typeOf(undefined), "undefined");

test_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
